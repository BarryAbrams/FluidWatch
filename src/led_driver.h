#pragma once
#include "main.h"

void Led_Init(void);
void Led_ScanSlotStart(void);
void Led_ScanSlotEnd(void);
void Led_SetGlobalBrightness(uint8_t level);
void Display_Clear(void);
void Display_SetPixelRC(uint8_t r, uint8_t c, uint8_t level);   // 0..BR_LEVELS
void Display_SetRegion(uint8_t r0, uint8_t c0, uint8_t w, uint8_t h, uint8_t level);
void Led_Suspend(void);   // all matrix pins Hi-Z, release any active pair
void Led_Resume(void);    // nothing to do now, placeholder for future
void draw_byte_center(uint8_t byte, uint8_t level);
void draw_hex_nibble(uint8_t r0, uint8_t c0, uint8_t nib, uint8_t level);
void draw_digit(uint8_t r0, uint8_t c0, uint8_t digit, uint8_t level);
void Led_AllOn(uint8_t level);

#define N_PINS     16
#define BR_LEVELS  256
#define BR_STEPS   256

typedef struct {
  GPIO_TypeDef *port;
  uint8_t pos;           // pin number 0..15
  uint16_t pinmask;      // (1 << pos)
} Pin;

static const Pin pins[N_PINS] = {
  {GPIOB,  1, GPIO_PIN_1},
  {GPIOB,  3, GPIO_PIN_3},
  {GPIOA,  8, GPIO_PIN_8},
  {GPIOB,  5, GPIO_PIN_5},
  {GPIOB,  0, GPIO_PIN_0},
  {GPIOA,  3, GPIO_PIN_3},
  {GPIOB,  4, GPIO_PIN_4},
  {GPIOA,  2, GPIO_PIN_2},
  {GPIOA, 12, GPIO_PIN_12},
  {GPIOA,  1, GPIO_PIN_1},
  {GPIOA, 11, GPIO_PIN_11},
  {GPIOB,  6, GPIO_PIN_6},
  {GPIOA,  9, GPIO_PIN_9},
  {GPIOA, 15, GPIO_PIN_15},
  {GPIOA, 10, GPIO_PIN_10},
  {GPIOB,  7, GPIO_PIN_7},
};

#define ROWS     15
#define COLS     15
#define N_PIXELS (ROWS*COLS)

typedef struct { uint8_t hi, lo; } CP_Step;

static const CP_Step STEPS[N_PIXELS] = {
  /* r00 */ {0,0}, {0,0}, {0,0}, {0,0}, {2,4}, {6,4}, {4,6}, {8,6}, {6,8}, {10,8}, {8,10}, {0,0}, {0,0}, {0,0}, {0,0},
  /* r01 */ {0,0}, {0,0}, {4,0}, {0,4}, {6,2}, {2,6}, {8,4}, {4,8}, {10,6}, {6,10}, {12,8}, {8,12}, {14,10}, {0,0}, {0,0},
  /* r02 */ {0,0}, {4,1}, {1,4}, {6,0}, {0,6}, {8,2}, {2,8}, {10,4}, {4,10}, {12,6}, {6,12}, {14,8}, {8,14}, {15,10}, {0,0},
  /* r03 */ {0,0}, {3,4}, {6,1}, {1,6}, {8,0}, {0,8}, {10,2}, {2,10}, {12,4}, {4,12}, {14,6}, {6,14}, {15,8}, {8,15}, {0,0},
  /* r04 */ {5,4}, {6,3}, {3,6}, {8,1}, {1,8}, {10,0}, {0,10}, {12,2}, {2,12}, {14,4}, {4,14}, {15,6}, {6,15}, {13,8}, {8,13},
  /* r05 */ {6,5}, {5,6}, {8,3}, {3,8}, {10,1}, {1,10}, {12,0}, {0,12}, {14,2}, {2,14}, {15,4}, {4,15}, {13,6}, {6,13}, {11,8},
  /* r06 */ {7,6}, {8,5}, {5,8}, {10,3}, {3,10}, {12,1}, {1,12}, {14,0}, {0,14}, {15,2}, {2,15}, {13,4}, {4,13}, {11,6}, {6,11},
  /* r07 */ {8,7}, {7,8}, {10,5}, {5,10}, {12,3}, {3,12}, {14,1}, {1,14}, {15,0}, {0,15}, {13,2}, {2,13}, {11,4}, {4,11}, {9,6},
  /* r08 */ {9,8}, {10,7}, {7,10}, {12,5}, {5,12}, {14,3}, {3,14}, {15,1}, {1,15}, {13,0}, {0,13}, {11,2}, {2,11}, {9,4}, {4,9},
  /* r09 */ {10,9}, {9,10}, {12,7}, {7,12}, {14,5}, {5,14}, {15,3}, {3,15}, {13,1}, {1,13}, {11,0}, {0,11}, {9,2}, {2,9}, {7,4},
  /* r10 */ {11,10}, {12,9}, {9,12}, {14,7}, {7,14}, {15,5}, {5,15}, {13,3}, {3,13}, {11,1}, {1,11}, {9,0}, {0,9}, {7,2}, {2,7},
  /* r11 */ {0,0}, {11,12}, {14,9}, {9,14}, {15,7}, {7,15}, {13,5}, {5,13}, {11,3}, {3,11}, {9,1}, {1,9}, {7,0}, {0,7}, {0,0},
  /* r12 */ {0,0}, {14,11}, {11,14}, {15,9}, {9,15}, {13,7}, {7,13}, {11,5}, {5,11}, {9,3}, {3,9}, {7,1}, {1,7}, {5,0}, {0,0},
  /* r13 */ {0,0}, {0,0}, {15,11}, {11,15}, {13,9}, {9,13}, {11,7}, {7,11}, {9,5}, {5,9}, {7,3}, {3,7}, {5,1}, {0,0}, {0,0},
  /* r14 */ {0,0}, {0,0}, {0,0}, {0,0}, {11,13}, {11,9}, {9,11}, {9,7}, {7,9}, {7,5}, {5,7}, {0,0}, {0,0}, {0,0}, {0,0},
};

static const uint8_t VALID_MASK[N_PIXELS] = {
  /* r0  */ 0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,
  /* r1  */ 0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,
  /* r2  */ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
  /* r3  */ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
  /* r4  */ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  /* r5  */ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  /* r6  */ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  /* r7  */ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  /* r8  */ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  /* r9  */ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  /* r10 */ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  /* r11 */ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
  /* r12 */ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
  /* r13 */ 0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,
  /* r14 */ 0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,
};

#define HEX_W 3
#define HEX_H 5
#define DIGIT_SP 1   /* horizontal spacing between digits */

static const uint8_t HEX_3x5[16][HEX_H] = {
  /*0*/ {0b111,0b101,0b101,0b101,0b111},
  /*1*/ {0b010,0b110,0b010,0b010,0b111},
  /*2*/ {0b111,0b001,0b111,0b100,0b111},
  /*3*/ {0b111,0b001,0b111,0b001,0b111},
  /*4*/ {0b101,0b101,0b111,0b001,0b001},
  /*5*/ {0b111,0b100,0b111,0b001,0b111},
  /*6*/ {0b111,0b100,0b111,0b101,0b111},
  /*7*/ {0b111,0b001,0b010,0b010,0b010},
  /*8*/ {0b111,0b101,0b111,0b101,0b111},
  /*9*/ {0b111,0b101,0b111,0b001,0b111},
  /*A*/ {0b111,0b101,0b111,0b101,0b101},
  /*B*/ {0b110,0b101,0b110,0b101,0b110},
  /*C*/ {0b111,0b100,0b100,0b100,0b111},
  /*D*/ {0b110,0b101,0b101,0b101,0b110},
  /*E*/ {0b111,0b100,0b111,0b100,0b111},
  /*F*/ {0b111,0b100,0b111,0b100,0b100},
};

static const uint8_t TINY_4x3[10][4] = {
    {0b111, 0b101, 0b101, 0b111}, // 0
    {0b010, 0b110, 0b010, 0b111}, // 1
    {0b110, 0b001, 0b010, 0b111}, // 2
    {0b111, 0b011, 0b001, 0b111}, // 3
    {0b101, 0b101, 0b111, 0b001}, // 4
    {0b111, 0b100, 0b011, 0b111}, // 5
    {0b100, 0b111, 0b101, 0b111}, // 6
    {0b111, 0b001, 0b010, 0b100}, // 7
    {0b111, 0b101, 0b010, 0b111}, // 8
    {0b111, 0b101, 0b111, 0b001}, // 9
};


void draw_hex_byte(uint8_t r0, uint8_t c0, uint8_t byte, uint8_t level);
void Led_CurtainReveal(uint16_t duration_ms, uint8_t hh, uint8_t mm, uint8_t ss);